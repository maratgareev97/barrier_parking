package ru.barrier.services;

import com.vdurmont.emoji.EmojiParser;
import lombok.extern.log4j.Log4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.barrier.configs.BotConfig;
import ru.barrier.models.User;
import ru.barrier.repository.UserRepository;

import java.util.ArrayList;
import java.util.List;

@Component
@Log4j
public class TelegramBotImpl extends TelegramLongPollingBot implements TelegramBot {
    @Autowired
    private UserRepository userRepository;
    final BotConfig botConfig;

    SendMessage sendMessage = new SendMessage();
    MenuBot menuBot = new MenuBot();


    public TelegramBotImpl(BotConfig config) {
        this.botConfig = config;

        // –ú–µ–Ω—é
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "–í–æ–π—Ç–∏ –≤ –±–æ—Ç"));
        listOfCommands.add(new BotCommand("/open", "–û—Ç–∫—Ä—ã—Ç—å —à–ª–∞–≥–±–∞—É–º"));
        listOfCommands.add(new BotCommand("/pay", "–û–ø–ª–∞—Ç–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É"));
        listOfCommands.add(new BotCommand("/balance", "–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–π –ø–∞—Ä–∫–æ–≤–∫–∏"));
        listOfCommands.add(new BotCommand("/help", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"));

        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("Error setting bot's command list: " + e.getMessage());
        }
    }

    public String getBotUsername() {
        return botConfig.getBotName();
    }

    public String getBotToken() {
        return botConfig.getToken();
    }

    @Transactional
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageTest = update.getMessage().getText().toString();

            String rentEmoji = EmojiParser.parseToUnicode("üìå");

            long chatID = update.getMessage().getChatId();
            switch (messageTest) {
                case "/start":
                    startMessage(chatID, update.getMessage().getChat().getFirstName());
                    break;
                case "–û—Ç–∫—Ä—ã—Ç—å —à–ª–∞–≥–±–∞—É–º":
                    sendMessage(chatID, "–û–¢–ö–†–´–í–ê–Æ");
                    break;
                case "/open":
                    openMessage(chatID);
                    break;
                default:
                    if (messageTest.equals(rentEmoji + " –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ")) {
                        timing(chatID);
                    } else {
                        sendMessage(chatID, "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
                    }
            }

        }
        if (update.hasCallbackQuery()) {
            if (update.getCallbackQuery().getData().toString().equals("Accept")) {
                System.out.println("!!!!!!!!!!   " + update.hasCallbackQuery());
                System.out.println("?????????????   " + update.getCallbackQuery().getData().toString());
                log.debug(update.getCallbackQuery().getFrom().getUserName());
                log.debug(update.getCallbackQuery().getFrom().getFirstName());
                log.debug(update.getCallbackQuery().getFrom().getId());

                registerUser(update.getCallbackQuery().getFrom().getId());

                // –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
//                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(String.valueOf(update.getCallbackQuery().getFrom().getId()));
                sendMessage.setText("");
                menuBot.baseMenu(sendMessage); //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–µ–Ω—é
                sendMessage(update.getCallbackQuery().getFrom().getId(), "–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É");
            }

            if (update.getCallbackQuery().getData().toString().equals("oneDay")) {
                System.out.println("!!!!!!!!!!   " + update.hasCallbackQuery());
                System.out.println("?????????????   " + update.getCallbackQuery().getData().toString());
                log.debug(update.getCallbackQuery().getFrom().getUserName());
                log.debug(update.getCallbackQuery().getFrom().getFirstName());
                log.debug(update.getCallbackQuery().getFrom().getId());

//                registerUser(update.getCallbackQuery().getFrom().getId());

                // –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
                sendMessage.setChatId(String.valueOf(update.getCallbackQuery().getFrom().getId()));
                sendMessage.setText("");
//                menuBot.baseMenu(sendMessage); //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–µ–Ω—é
                sendMessage(update.getCallbackQuery().getFrom().getId(), "–û–¥–∏–Ω –¥–µ–Ω—å");
            }
        }
    }

    @Override
    public void startMessage(long chatID, String name) {
        String answer = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ " + name + ".\n" + "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–∞—Ä–∫–æ–≤–∫—É. " +
                        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞—Ä–µ–Ω–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –æ—Ñ–µ—Ä—Ç–æ–π –∏ " +
                        "—Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.";
        SendDocument sendDocument = new SendDocument();
        sendDocument.setChatId(chatID);
        sendDocument.setDocument(new InputFile("http://test.school89.net/wp-content/uploads/2023/07/public_contract_foras.pdf"));
        sendDocument.setCaption(answer);

        //–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        MenuBot menuBot = new MenuBot();
        menuBot.doingAcceptContractMenu(sendDocument); //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–µ–Ω—é

        try {
            execute(sendDocument);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        log.debug(answer + ", " + chatID);
    }

    private void openMessage(long chatID) {
        String answer = "–û—Ç–∫—Ä—ã–≤–∞—é";
        sendMessage(chatID, answer);
        log.debug(answer);
    }

    private void sendMessage(long chatID, String textToSend) {
        sendMessage.setChatId(String.valueOf(chatID));
        sendMessage.setText(textToSend);

        try {
            execute(sendMessage);
            log.debug(textToSend);
        } catch (TelegramApiException e) {
            System.out.println("–ù–µ —É—à–ª–æ");
        }
    }

    @Override
    public void registerUser(Long chatId) {
        User user = new User();
        user.setChatId(chatId);
        userRepository.save(user);
    }

    public void timing(Long chatId) {
        String text = "1 –¥–µ–Ω—å - 300 —Ä—É–±.\n" +
                      "7 –¥–Ω–µ–π - 2000\n" +
                      "10 –¥–Ω–µ–π -2500\n" +
                      "15 –¥–Ω–µ–π - 3500\n" +
                      "1 –º–µ—Å—è—Ü- 6000";
        MenuBot menuBot = new MenuBot();
        SendMessage sendMessage1 = new SendMessage();
        sendMessage1.setChatId(chatId);
        sendMessage1.setText(text);
        menuBot.timing(sendMessage1); //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –º–µ–Ω—é
//        sendMessage(chatId, text);
        try {
            execute(sendMessage1);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }


}
